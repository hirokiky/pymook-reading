======================================================================================
 第1回 - 第1章 よくわかるPythonの世界、これだけは知っておきたいPython言語はじめの一歩
======================================================================================

.. contents:: 目次
   :local:

はじめに
========
鈴木たかのりです。

この連載では `Pythonエンジニア養成読本 <http://gihyo.jp/book/2015/978-4-7741-7320-7>`_
という書籍の `読書会イベント <http://pymook.connpass.com/>`_ についてレポートします。
この書籍は「他のプログラミング言語は知っていて、これからPythonを始める方」を対象として、私を含め6人のPythonista(Pythonを使う人)で執筆し、4月17日に技術評論社から発売されました。

読書会では書籍と同様に、Pythonの初心者の方を対象としています。
また、書籍を持っていなくても理解できるような内容にしています(書籍を持っていればより理解が深まると思いますが)。

私が、この読書会を始めようと思った動機としては、単純にこの本を読んだ人はどんな人たちで、どんな感想を持っているのか知りたいということがありました。そして、どの部分を疑問と思ったのかを知りたいと思ったということもあります。

読書会の進め方
==============
`第1回の読書会 <http://pymook.connpass.com/event/14008/>`_ は5月21日(木)に `アライドアーキテクツ株式会社 <http://www.aainc.co.jp/>`_ の会議室で開催されました。
今後月1回のペースででそれぞれの章の筆者が中心となって読書会を進めていく予定です。

当日は以下のタイムテーブルで進めました。

- 19:00-19:10 参加者の自己紹介
- 19:10-19:40 「第1章 よくわかるPythonの世界」
- 19:10-21:10 「第2章 これだけは知っておきたいPython言語はじめの一歩」
- 21:10-22:00 ビアバッシュ(ビールとピザでの参加者懇親会)

一般的な読書会では「書籍の内容をみんなで読み解く」といった形式が多いと思います。
しかし、この読書会では内容の読みあわせは行わず、書籍に付加した内容を話したり、参加者の持っている疑問点などをぶつけてもらって、みんなで議論して進めていこうと思っています(参加者のみなさんに活発に意見を言ってもらうのは難しかったりしますが)。

この形式は私の発案ではなく、以前参加していた
`エキスパートPythonプログラミング読書会 第二期 <http://connpass.com/series/31/>`_
の進め方を参考にしています。
ビアバッシュのときにLTを盛り込むところも参考にさせてもらいました(丸パクリしました)。

自己紹介
========
最初に私も含めて参加者全体の自己紹介を行いました。
全部で16名の方が参加してくださいました。

参加者の傾向としては「仕事でPythonを使っています」という人はほとんどおらず、「これからPythonをやろうと思っている」「普段は別言語で開発をしている」という方が多かったと思います。
業界もネットワーク系、Androidの開発、Webエンジニア、研究者、営業、マーケティング等いろいろな方がいて、普段参加する開発系のイベントとは異なる人達が多く、なかなか興味深かったです。

第1章 よくわかるPythonの世界
============================
第1章は私の担当です。この章ではPythonのプログラミングについてはほとんど書いていませんが、プログラミング言語Pythonをより深く知るためのネタ的な内容が書いてあります。読書会ではその内容をさらっと紹介しつつ、質疑応答を行いました。

1-1 Pythonの特徴
----------------
この節ではプログラミング言語Pythonの特徴的なポイントについて解説しました。

そもそもPythonという名前なので、ロゴマークなどには「ヘビ」をモチーフとした物が多いです。しかし、その名前は実はイギリスのコメディグループ「モンティ・パイソン」からとられています。

.. todo:: pythonロゴ入れる

また、自己紹介のところで「きれいなコードだと思った」と発言された方がいますが、それはPythonのコードがインデントでブロック構造を示すことや、言語設計として「誰が書いても同じようなコードになる」という方向性であることが影響しているのでは、と話しました。

下記のサンプルコードのように、forループやif文の範囲(ブロック)は同一のインデントによって表しています。パッと見でコードの構造がわかりやすいと思います。

.. code-block:: python
   :caption: Pythonではブロック構造をインデントで表す
   
   for i in range(10):
       if i % 5 == 0:
           print 'ham'
       elif i % 3 == 0:
           print 'eggs'
       else:
           print 'spam'

また、Pythonらしさを表す文章としてこの節では
`The Zen of Python <https://www.python.org/dev/peps/pep-0020/>`_
という格言についても説明しました。
この格言はPythonインタープリタで ``import this`` と入力すると表示されます。
1行目は「きたないよりきれいな方がいい」といった意味になります。

.. code-block:: python
   :caption: import thisで

   >>> import thisでThe Zen of Pythonを表示
   The Zen of Python,  Tim Peters

   Beautiful is better than ugly.
   Explicit is better than implicit.
   (以下略)

ちなみに、import thisのソースコードには格言の内容はそのままは格納されていません。
`import thisのソースコード <https://github.com/python/cpython/blob/master/Lib/this.py>`_ を参照すると暗号化されています。
興味のある方は、どのような処理なのか調べてみてください。

1-2 その歴史とバージョン選定のポイント
--------------------------------------
この節ではPythonのリリースバージョンと、どのバージョンを使うべきかについて話しました。

現在アクティブなバージョンはPython 2系(最新は2.7.10)とPython 3系(最新は3.4.3)です。
Python 3系はPython 2系とは一部の互換性を排しており、とくに重要な変更点として「文字列がUnicode文字列に統一」を紹介しました。

Python 2系では日本語のencode/decode処理でエラーが発生することがよくあります。
そのため、新規にコードを書くのであればPython 3系をおすすめします。
しかし、この書籍では「すでに存在するプロジェクトに入る人」をターゲットと想定したので、Python 2系で解説をしています。

ここで「Macを使っているが、2系と3系の両方をインストールできるのか?」という質問がありました。
Mac であれば XXXX からダウンロードしたインストーラーで両方インストールしても問題ありません。brew でも両方インストールできます。

.. code-block:: sh
   :caption: Mac に brew で Python 2系と3系をインストール

   $ brew install python python3
   $ /usr/local/bin/python -V
   Python 2.7.9
   $ /usr/local/bin/python3 -V
   Python 3.4.2

「現在Python 2系のコードが有り、Python 3系に移行する場合はどうすべきか」という質問がありました。
これは、そのプロジェクトを今後どうしていくかにもよると思います。
長く続くのであればPython 2系は2020年にサポートが切れるため、3系に移行すべきです。そうでなけば移行のためのコストが持てるのかどうかによるるという回答をしました。

Python 2系のコードを3系に変換する
`2to3 <http://docs.python.jp/2.7/library/2to3.html>`_ というがツールがありますが、変換すると2系に対応できなくなります。
`six <https://pypi.python.org/pypi/six>`_ というパッケージを利用し、Python 2系に3系の機能をとりこみ、一つのコードで両方でで動作する方がおすすめであるという話をしました。

1-3 Pythonのコミュニティ
------------------------
この節ではせっかくPythonを使うのであれば、一人で勉強するよりも人と知り合ったほうがよいと考え、コミュニティについて紹介しました。
この読書会イベントもコミュニティの一つと考えられます。

最初に `PyCon(Python Conference) <http://www.pycon.org/>`_ について紹介しました。PyConは名前の通り、プログラミング言語Pythonのための国際カンファレンスです。
日本でも `PyCon JP <http://www.pycon.jp>`_ が開催されていますが、他にも世界各国でPyConが開催されています
(私も台湾で開催される `PyCon APAC <https://tw.pycon.org/2015apac/en/>`_ に参加予定です)。

他にもPythonベースのツールやライブラリに関するコミュニティや、開発をする「もくもく会」的なコミュニティがあります。
Pythonコミュニティの探し方については、記事後半の「ビアバッシュ」のところで紹介します。
また、今回の読書会参加者は(全員男性のため)関係ありませんが、
`PyLadies Tokyo <http://pyladies-tokyo.connpass.com/>`_ という女性のコミュニティもあります。

第2章 これだけは知っておきたいPython言語はじめの一歩
====================================================
第2章の著者の清原弘貴(`@hirokiky <https://twitter.com/hirokiky>`_)から自己紹介と、 `PyCharm <>`_ の紹介がありました。

普段、開発環境として使用している PyCharm の使いやすい部分についての紹介がありました。
PyCharmには機能が一部制限されている無料の **Community Edition** があるので、まずはそちらを使ってみると良いです。
有料の **Professional Edition** は年間99ドルです。

2-1 Pythonをはじめよう
----------------------
Pythonには
`Python チュートリアル <http://docs.python.jp/2/tutorial/>`_
という非常に優れたドキュメントがあります。
ただ、少し内容が長いということと、「最初はここまで知らなくてもいいのでは」という内容も含まれているという印象です。
そのため、この章ではPythonチュートリアルから内容を削って「これだけは知っておいてほしい」という内容を入れました。
なお、Pythonチュートリアルは易しくはないですがとてもよいドキュメントですので、Pythonをはじめようと思っている方はぜひ読んでみてください。

他の導入向け書籍については
`Pythonスタートブック <http://gihyo.jp/book/2010/978-4-7741-4229-6>`_ はプログラミングを知らない人も含めて導入にはとてもよい本です。
`初めてのPython <http://www.oreilly.co.jp/books/9784873113937/>`_ もよい本ですが808ページと分厚いのでちょっと手に取りにくいと思います。

また自己紹介で「 `集合知プログラミング <http://www.oreilly.co.jp/books/9784873113647/>`_ の内容を学びたい」という方がいました。この本の内容はよいが、Pythonの書き方がきれいではないという説明がありました。

この節ではPythonのインストールから、対話モードの実行、 `FizzBuzz <http://ja.wikipedia.org/wiki/Fizz_Buzz>`_ をサンプルに簡単なプログラムを作成するところまでを詳細に解説しました。FizzBuzzは「数字を連続で言っていくが、3の倍数ではFizz、5の倍数ではBuzz、15の倍数ではFizzBuzzと言う」というゲームです。

最終的には以下のようなコードが作成されます。

.. code-block:: python
   :caption: fizzbuzz.py

   def fizzbuzz(num):
       if num % 3 == 0 and num % 5 == 0:
           return 'FizzBuzz'
       elif num % 3 == 0:
           return 'Fizz'
       elif num % 5 == 0:
           return 'Buzz'
       else:
           return str(num)

   for num in range(1, 101):
       print fizzbuzz(num)

その中で、Pythonのプログラミングの基本となる、下記の要素について解説しました。

- 文字列: ``'Fizz'``, ``'Buzz'`` のように文字列が定義できること
- 関数の定義: ``def 関数名(引数):`` と書いて関数が定義できること
- 組み込み関数: 連続した数字を返す ``range()`` 関数と、文字列に変換する ``str()`` 関数について
- for文: ``for`` による繰り返しのループについて
- if文: ``if``, ``elif``, ``else`` による条件分岐について
- 比較演算子: ``==`` 比較演算子により値をチェックしていることについて
- ``%`` 演算子: 剰余(``%``)の演算子について

ここで「 ``range(1, 101)`` となっているのはなぜか」という質問がありまいた。
``range()`` 関数は引数が1つの場合は終了値(0開始でその値以下)、2つの場合は開始値と終了値を指定したことになります。
この例では1〜100のFizzBuzzを実行したいため ``range(1, 101)`` としました。
また、第3引数を指定するとstepが指定できます。

.. code-block:: python
   :caption: range関数の例

   >>> range(10)        # 終了値を指定
   [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
   >>> range(1, 10)     # 開始、終了値を指定
   [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
   >>> range(1, 11, 2)  # 開始、終了値、ステップを指定
   [1, 3, 5, 7, 9]

また、プログラミングの練習問題として
`Project Euler <https://projecteuler.net/>`_
がおすすめであるという話がありました。
このサイトではさまざまな数学に関する問題が提供されています。
`日本語の解説 <http://odz.sakura.ne.jp/projecteuler/>`_ もあるので、英語の問題が読めない人でも安心です。

2-2 Pythonのデータ型［基本編］
------------------------------

2-3 Pythonのデータ型［コレクション編］
--------------------------------------

2-4 ファイル操作とモジュール
----------------------------

- 文字列とか型についてざっと説明
- スライス
- encode, decodeでなぜこうなるの?→書籍の都合で「日」の部分だけをdecodeしている
  - unicode文字をそのまま表示してくれないので print 文を使っている
  - python 3だと日本語が表示される
  - PEPがあって、いしもとさんが書いた(あとでリンクしよう)
- 型推論とかは?
  - annotationはPython 2にはない
  - Python 3.5だとできるようになる?
  - docstringに

- collection
  - リスト内包表記だときれいにかけるよ
- tupleはimmutableだよ
- 辞書は順番がないよ  
- Setは順番は持っていない。同じ値が入らない
- リスト内包表記って→実行が速い
  - 複雑になるなら書かない方がいい
- データが多い時どうする?
  - 集合を使うと容量は少なく、inも速い
  - もっと多いならredisとかミドルウェアを使う  
- importでよみだせるよ
  - 標準ライブラリがたくさんあるよ→便利なものを知っておくと便利
- import でメソッド内で読むのはどう?
  - おすすめしない。なにに依存しているのか見難くなる
- pyoファイルがうざい→モジュール分割したほうがいいので気にしない
  - パフォーマンスもあるので、しょうがない
  - 別の場所においたりできるといいな→たしかに
- getでdefaultを指定するのがおすすめ
    
ビアバッシュ(懇親会)
====================
読書会の終了後ビールとピザで懇親会(ビアバッシュ)を行いました。

- http://connpass.com/category/Python/
- http://pyconjp.blogspot.jp/2015/04/python-event-201505.html
- http://connpass.com/event/14076/
- http://www.amazon.co.jp/s/ref=nb_sb_noss?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&url=search-alias%3Daps&field-keywords=%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E9%A4%8A%E6%88%90%E8%AA%AD%E6%9C%AC

まとめ
======
