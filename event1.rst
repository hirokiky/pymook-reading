======================================
 「Pythonエンジニア養成読本」読書会01
======================================

.. contents:: 目次
   :local:

はじめに
========
鈴木たかのりです。

この連載では `Pythonエンジニア養成読本 <http://gihyo.jp/book/2015/978-4-7741-7320-7>`_
という書籍の読書会の内容についてレポートしていきます。
この書籍は、私を含め6人のPythonista(Pythonを使い人)で2015年の1月から執筆を開始し、4月17日に技術評論社から発売されました。

私が、この読書会を始めようと思った動機としては、単純にこの本を読んだ人はどんな人たちでどんな感想を持っているのか知りたいということと、どのあたりを疑問と思ったのかを知りたいといったことです。

読書会の進め方
==============
読書会は以下のタイムテーブルで進めていきました。

- 19:00-19:10 参加者の自己紹介
- 19:10-21:00 著者を中心に質疑応答をしながら進める
- 21:00-22:00 ビアバッシュ(ビールとピザでの参加者懇親会)

また、一般的な読書会では難しい内容の書籍をみんなで読み解く、といった形式が多いと思います。
しかし、この読書会では内容の読みあわせはこの場では行わず、書籍の内容に付加した内容を話したり、参加者の持っている疑問点などをぶつけてもらって、みんなでディスカッションして進めていこうと思っています(なかなか参加者のみなさんに疑問点とかを言ってもらうのは難しかったりしますが)。

この形式は私の発案ではなく、以前参加していた
`エキスパートPythonプログラミング読書会 第二期 <http://connpass.com/series/31/>`_
の進め方を参考にしています。
ビアバッシュのときにLTとかを盛り込んだりするところも参考にさせてもらいました(丸パクリしましたw)。

自己紹介
========
まずは私も含めて参加者全体の自己紹介です。
XX名の方が参加してくださいました。

参加者の傾向としては、やはり「仕事でPythonを使っています」という人はほとんどおらず、「これからPythonをやろうと思っている」「普段はPHP、Javaで開発をしている」という方が多かったように思います。
業界もネットワーク系、Androidの開発、Webエンジニア、研究者、営業、マーケティング等いろいろな方がいて、普段私が参加する開発系のイベントとは異なる人達が多くて、なかなか興味深かったです。

印象的だった自己紹介の発言としては「普段はPHPで開発をしているが、Pythonのソースを見てきれいなので、これだ!と思った」という方や、
「 `集合知プログラミング <http://www.oreilly.co.jp/books/9784873113647/>`_ の内容をやってみたい」という方がいました。

第1章 よくわかるPythonの世界
============================
第1章は私の担当です。この章ではPythonのプログラミングそのもののことはほとんど書いていませんが、プログラミング言語Pythonをより深く知るためのネタ的な内容が書いてあります。読書会ではその内容をさらっと紹介しつつ、質疑応答を行いました。

1-1 Pythonの特徴
----------------
この節ではプログラミング言語Pythonの特徴的なポイントについて解説しました。

そもそもPythonという名前なので、ロゴマークなどには「ヘビ」をモチーフとした物が多いです。しかし、その名前は実はイギリスのコメディグループ「モンティ・パイソン」からとられています。

また、自己紹介のところで「きれいなコードだと思った」と発言された方がいますが、そのあたりはPythonのコードがインデントでブロック構造を示すことや、言語設計として「誰が書いても同じようなコードになる」という方向性であることが大本にあるという解説をしました。書籍の中でも下記のサンプルコードで説明しています。forループやif分の範囲をendというキーワードや閉じカッコで終了していないことがポイントです。

.. code-block:: python
   :caption: Pythonではブロック構造をインデントで表します
   
   for i in range(10):
       if i % 5 == 0:
           print 'ham'
       elif i % 3 == 0:
           print 'eggs'
       else:
           print 'spam'

また、個人的な意見ですが「Pythonを使っている人は規約をきちんと決める人が多い印象がある」という話をしました。
これはPythonの拡張機能を決めるための `PEP(Python Enhancement Proposal：Python拡張の提案) <https://www.python.org/dev/peps/pep-0001/>`_
というルールが存在していることもPythonらしさの表れだと考えています。

また、Pythonらしさを表す文章としてこの節では
`The Zen of Python <https://www.python.org/dev/peps/pep-0020/>`_
という格言についても簡単に説明しました。この格言は
Pythonインタープリタで ``import this`` とやると表示されます。
手元に Python の実行環境がある人は(最近のLinux, Macなどは最初から入っています)試してみてください。
また、このimport thisのソースコードには格言の内容がそのままは格納されていませんという話もしました。
`import thisのソースコード <https://github.com/python/cpython/blob/master/Lib/this.py>`_ はこんな感じで暗号化(といっていいんでしょうか)されています。興味のある方は、どのようになっているのか読みといてみてください。

Pythonには標準のもの以外にいくつかの処理系があるという話をしました。
ここで「PyPyは最近どうなのか?」という質問が出ました。
`PyPy <http://pypy.org/>`_ はPythonで実装されたPythonです(正確に言うとRPythonという制約を加えたPythonで実装されています)。
PyPyは当初は実験的な実装という位置づけでしたがが、現在は XXXX となっておりJIT(Just-in-Time)コンパイラのおかげでPythonよりも高速に動作する場合もあります。
XXXX ではPyPy を使っているという話もありました。

他にもJava仮想マシン(JVM)で動作する
`Jython <http://www.jython.org/>`_ や
.NET Framework上で動作する `IronPython <http://ironpython.net/>`_ などがあり、
それらのオブジェクトをPythonから操作したいなどの場合には有効に使えるという話もしました。

1-2 その歴史とバージョン選定のポイント
--------------------------------------
この節ではPythonのリリースバージョンについてと後半ではどのバージョンを使うべきかについての解説を行いました。

現在アクティブなバージョンはPython 2系(最新は2.7.9)とPython 3系(最新は3.4.3)です。
Python 3系はPython 2系とは一部の互換性を排しており、Pythonエンジニア養成読本では例として以下の4つの違いについて解説しています。

- printが文から関数に変更
- 文字列がUnicode文字列に統一
- 整数同士の割り算結果が実数に変更
- 標準ライブラリの再構成

とくに「文字列がUnicode文字列に統一」については日本人にとって影響は大きいと思います。Python 2系では日本語のencode/decodeなどでエラーが発生することがよくあるので、新規にコードを作成するのであればPython 3系を使用することをおすすめします。
しかし、この書籍では「すでに存在するプロジェクトに入る人」をターゲットと考えたので、Python 2系で解説をしています。
とはいえ、多くの部分は違いにさえ気をつければ、Python 3系でも役に立つ内容が多いと思います。

ここで「Mac OS Xを使っているが、Python 2系と3系の両方をインストールするにはどうしたらよいのか」という質問がありました。
基本的にインストールして上書きされることはないので、Mac であればインストーラーで両方インストールしてもいいですし、brew でもそれぞれインストールすることが可能です。
また、Linuxの場合は2章で説明する「インストール時にprefixをつける」ことによって、複数バージョンのPythonをインストール可能であるという解説もありました。

.. code-block:: sh
   :caption: brew でPython 2系と3系をインストール

   $ brew install python	     
   $ brew install python3
   $ /usr/local/bin/python2 -V
   Python 2.7.9
   $ /usr/local/bin/python -V
   Python 2.7.9
   $ /usr/local/bin/python3 -V
   Python 3.4.2

他の質問で「現在Python 2系のコードが有り、Python 3系に移行する場合はどうすべきか」という質問がありました。
これは、そのプロジェクトを今後どうしていくかにもよるのです。
長く続くのであればPython 2系はサポートが切れるので3系に移行すべきですが、そうでないのであれば移行のためのコストが持てるのかどうかにも係るという回答をしました。

また、Python 2系のコードを3系に対応させる
`2to3 <http://docs.python.jp/2.7/library/2to3.html>`_ というがツールがありますが、最近は周りではあまり使われていないという話をしました。
どちからというと `six <https://pypi.python.org/pypi/six>`_ というパッケージを利用し、Python 2系に3系の機能をとりこみ、一つのコードで2系と3系で動作するようにする方がおすすめであるという話をしました。

また、開発環境として何を使っているかという質問がありました。すでにEmacs、Vim等のエディタを使っている場合はそのままでよいと思いますが、
とくにないのであれば `PyCharm <https://www.jetbrains.com/pycharm/>`_ というPython用のIDEを使うのがおすすめという回答をしました。

1-3 Pythonのコミュニティ
------------------------
この節ではせっかくPythonを使うのであれば、一人で勉強するよりも人と知り合ったほうがよいと考え、コミュニティについて紹介しています。

前半では `PyCon(Python Conference) <http://www.pycon.org/>`_ について紹介しています。PyConは名前の通り、プログラミング言語Pythonのための国際カンファレンスです。
日本では `PyCon JP <http://www.pycon.jp>`_ が開催されていますが、他にも世界各国でPyConが開催されており、私も今年は台湾で開催される
`PyCon APAC <https://tw.pycon.org/2015apac/en/>`_ に参加予定であるという話もしました。

後半では日本にあるPythonコミュニティについて紹介しました。
PythonコミュニティにはPythonベースのツールやライブラリに関するコミュニティや、集まって開発をする「もくもく会」的なコミュニティがあるという話をしました。
Pythonコミュニティの探し方については、記事後半の「ビアバッシュ」のところで紹介します。

また、今回の読書会参加者には関係ありませんが、
`PyLadies Tokyo <http://pyladies-tokyo.connpass.com/>`_ というコミュニティもあるという話をしました。

第2章 これだけは知っておきたいPython言語はじめの一歩
====================================================

hirokikyの自己紹介
------------------
第2章に入る前に、最初に著者の清原 弘貴(`@hirokiky <https://twitter.com/hirokiky>`_)から改めて自己紹介がありました(私も別途自己紹介すればよかったと思いました)。

また、1章で話題にあがったPyCharmを普段使用しているので、実際にPyCharmの使いやすい部分について紹介しました。
PyCharmには機能が一部制限されている **Community Edition ** があるので、まずはそのバージョンを使ってみるとよいという話がありました。
なお、有料の **Professional Edition** は99ドルです。

2-1 Pythonをはじめよう
----------------------
- チュートリアルやればいいけど、でも長いよ
- やさしくはないけど、いいドキュメントです
- はじめてのPythonはいい本だけど分厚い。808ページ
- Pythonスタートブックは導入にはいい本→クラスは書けない
- 集合知プログラミング→Pythonの書き方がきれいではない

- Pythonチュートリアルから削って作った感じ
- ./configure --prefix でインストール先を分けられるよ
- 3章に出てくるvirtualenvを使って、仮想的なpython環境を作る→詳しくは次回
- FizzBuzzのコードを書くところまでは結構こまかく説明
- Project Eulerをおすすめ https://projecteuler.net/
  - とくと人のコードが見れるよ

2-2 Pythonのデータ型［基本編］
------------------------------

2-3 Pythonのデータ型［コレクション編］
--------------------------------------

2-4 ファイル操作とモジュール
----------------------------

- rangeは101で100なのか。rangeのソースがみたい→PyCharmでとんだら見れなかったw
- range(start, end, step)を書けるよ

- 文字列とか型についてざっと説明
- スライス
- encode, decodeでなぜこうなるの?→書籍の都合で「日」の部分だけをdecodeしている
  - unicode文字をそのまま表示してくれないので print 文を使っている
  - python 3だと日本語が表示される
  - PEPがあって、いしもとさんが書いた(あとでリンクしよう)
- 型推論とかは?
  - annotationはPython 2にはない
  - Python 3.5だとできるようになる?
  - docstringに

- collection
  - リスト内包表記だときれいにかけるよ
- tupleはimmutableだよ
- 辞書は順番がないよ  
- Setは順番は持っていない。同じ値が入らない
- リスト内包表記って→実行が速い
  - 複雑になるなら書かない方がいい
- データが多い時どうする?
  - 集合を使うと容量は少なく、inも速い
  - もっと多いならredisとかミドルウェアを使う  
- importでよみだせるよ
  - 標準ライブラリがたくさんあるよ→便利なものを知っておくと便利
- import でメソッド内で読むのはどう?
  - おすすめしない。なにに依存しているのか見難くなる
- pyoファイルがうざい→モジュール分割したほうがいいので気にしない
  - パフォーマンスもあるので、しょうがない
  - 別の場所においたりできるといいな→たしかに
- getでdefaultを指定するのがおすすめ
    
ビアバッシュ(懇親会)
====================
読書会の終了後ビールとピザで懇親会(ビアバッシュ)を行いました。

- http://connpass.com/category/Python/
- http://pyconjp.blogspot.jp/2015/04/python-event-201505.html
- http://connpass.com/event/14076/
- http://www.amazon.co.jp/s/ref=nb_sb_noss?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&url=search-alias%3Daps&field-keywords=%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E9%A4%8A%E6%88%90%E8%AA%AD%E6%9C%AC

まとめ
======
